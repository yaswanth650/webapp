pipeline {
  agent any 
  tools {
    maven 'Maven'
  }
 environment {
         SEMGREP_APP_TOKEN = credentials('SEMGREP_APP_TOKEN')
         CT_SERVER_URL = 'https://cloud.codethreat.com/'
    }
options {
        durabilityHint 'MAX_SURVIVABILITY'
    } 
  stages {
    stage ('Initialize') {
      steps {
        sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
            ''' 
      }
    }
    stage ('Check-Git-Secrets') {
      steps {
        sh 'rm trufflehog || true'
        sh 'docker run gesellix/trufflehog --json https://github.com/cehkunal/webapp.git > trufflehog'
        sh 'cat trufflehog'
      }
    }
    stage ('Source Composition Analysis') {
      steps {
         sh 'rm owasp* || true'
         sh 'wget "https://raw.githubusercontent.com/cehkunal/webapp/master/owasp-dependency-check.sh" '
         sh 'chmod +x owasp-dependency-check.sh'
         sh 'bash owasp-dependency-check.sh'
         sh 'cat /var/lib/jenkins/OWASP-Dependency-Check/reports/dependency-check-report.xml'
         }
    }
  stage('snyk') {
      steps {
        echo 'Testing...'
        snykSecurity(
          snykInstallation: 'snyk',
          snykTokenId: 'snyk',
          failOnIssues:'false'
          )
       }
     }
    stage ('SAST') {
      steps {
        withSonarQubeEnv('sonarqube') {
          sh 'mvn sonar:sonar'
          sh 'cat target/sonar/report-task.txt'
        }
      }
    }
  stage('Semgrep-Scan') {
          steps {
            sh '''docker pull semgrep/semgrep && \
            docker run \
            -e SEMGREP_APP_TOKEN=$SEMGREP_APP_TOKEN \
            -v "$(pwd):$(pwd)" --workdir $(pwd) \
            semgrep/semgrep semgrep ci '''
      }
    }
    stage('Clone') {
            steps {
                git url: 'https://github.com/yaswanth650/webapp.git', branch: 'master'
                sh 'zip -r webapp.zip .'
            }
        }
   stage('CODETHREAT-Scan') {
            steps {
                 withCredentials([string(credentialsId: 'code-threat', variable: 'accessTokenSecret')]) {
                    script {
                        CodeThreatScan(
                            ctServer: "${CT_SERVER_URL}",
                            fileName: "webapp.zip",
                            project_name: "webapp",
                            credentialsId: "code-threat",
                            organization_name: "yaswanth650@github",
                            maxNumberOfHigh: 50,
                            maxNumberOfCritical: 50,
                            weaknessIs: ".*injection,buffer.over.read,mass.assignment", 
                            condition: "OR",
                            policyName: "Advanced Security",
                            scaMaxNumberOfHigh: 25,
                            scaMaxNumberOfCritical: 25
                        )
                    }
                }
            }
        }
    stage ('Build') {
      steps {
      sh 'mvn clean package'
       }
    }
  stage('Artifact File exist'){
        steps{
            echo ' checking file in workspace'
            fileExists '/var/lib/jenkins/workspace/WEBAPP/target/WebApp.war'
            echo 'file exist'
           }
       }
   stage('Artifact file upload to Nexus'){
        steps{
           echo ' Artifact uploading start-----'
           nexusArtifactUploader artifacts: [[artifactId: 'WebApp', classifier: '', file: '/var/lib/jenkins/workspace/WEBAPP/target/WebApp.war', type: 'war']], credentialsId: 'NEXUS_CRED', groupId: 'lu.amazon.aws.demo', nexusUrl: '13.201.84.116:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'webapp', version: '1.0-SNAPSHOT'
           echo 'Artifact uploaded'
        }
    }
   stage('server'){
                steps{
                  rtServer(
                          id: "Artifactory",
                          url: 'http://3.110.132.248:8081/artifactory/',
                          username: 'admin',
                          password: 'password',
                          bypassProxy: 'true',
                          timeout:300
                          )
                }
        }
     stage('upload'){
                steps{
                  rtUpload(
                          serverId: "Artifactory",
                          spec: '''{
                          "files":[
                          {
                          "pattern": "*.war",
                          "target": "libs-snapshot-local"
                          }
                                ]
                              }'''
                          )
                }
        }
        stage('publish build info'){
                steps{
                   rtPublishBuildInfo(
                      serverId: "Artifactory"
                           )
                }
        } 
    stage('Artifact file upload to S3BUCKET'){
        steps{
            echo ' Artifact uploading start-----'
            s3Upload consoleLogLevel: 'INFO', dontSetBuildResultOnFailure: false, dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: 'artifacts6', excludedFile: '', flatten: false, gzipFiles: false, keepForever: false, managedArtifacts: false, noUploadOnFailure: false, selectedRegion: 'ap-south-1', showDirectlyInBrowser: false, sourceFile: '**/*.war', storageClass: 'STANDARD', uploadFromSlave: false, useServerSideEncryption: false]], pluginFailureResultConstraint: 'FAILURE', profileName: 'articats6', userMetadata: []
            echo 'Artifact uploaded'
        }
    }
   stage ('Deploy-To-Tomcat') {
            steps {
           sshagent(['tomcat']) {
                sh 'scp -o StrictHostKeyChecking=no target/*.war ubuntu@13.233.167.119:/prod/apache-tomcat-10.1.30/webapps/WebApp.war'
              }      
           }       
    }
  stage ('Port Scan') {
                    steps {
                        sh 'rm nmap* || true'
                        sh 'docker run --rm -v "$(pwd)":/data uzyexe/nmap -sS -sV -oX nmap 13.233.167.119'
                               sh 'cat nmap'
                    }
                }
    stage ('DAST') {
      steps {
        sshagent(['owasp-zap']) {
         sh 'ssh -o  StrictHostKeyChecking=no ubuntu@65.0.110.117 "docker run -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://13.233.167.119:8443/WebApp/" || true'
        }
      }
    }
   stage ('Nikto Scan') {
                    steps {
                        sh 'rm nikto-output.xml || true'
                        sh 'docker run --user $(id -u):$(id -g) --rm -v $(pwd):/report -i secfigo/nikto:latest -h 13.233.167.119 -p 8443 -output /report/nikto-output.xml'
                        sh 'cat nikto-output.xml'
                    }
            }
    stage ('SSL Checks') {
                    steps {
                        sh 'docker run --rm -i nablac0d3/sslyze:5.0.0  13.233.167.119:8443 --json_out results.json || true'
                    }
               }
    stage('Image Scan') {
            steps {
               sh 'trivy image gesellix/trufflehog'
               sh 'trivy image nablac0d3/sslyze:5.0.0'
            }
        }
     stage('Probely') {
                 steps {
                    probelyScan targetId: '2owcXbqFUMUh', credentialsId: 'probely', waitForScan: true, stopIfFailed: true, failThreshold: 'high'
               }
           }
    stage ("Dastardly") {
            steps {
                cleanWs()
                sh 'docker run --user $(id -u) -v ${WORKSPACE}:${WORKSPACE}:rw -e BURP_START_URL=https://65.0.3.174:8443/WebApp/ -e BURP_REPORT_FILE_PATH=${WORKSPACE}/dastardly-report.xml public.ecr.aws/portswigger/dastardly:latest || true' 
            }
        }
}
post {
    always {
      script{
        def jobName = env.JOB_NAME
        def buildNumber = env.BUILD_NUMBER
        def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
        def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
        def body = """<html>
                        <body>
                          <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                             <h2>${jobName} - Build ${buildNumber}</h2>
                             <div style="background-color: ${bannerColor}; padding: 10px;">
                               <h3 style="color: white;">Pipeline Status:
                               ${pipelineStatus.toUpperCase()}</h3>
                            </div>
                            <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                         </div> 
                      </body>   
                   </html>"""
        emailext (
           subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
           body: body,
           to: 'ravuriyaswanth6@gmail.com',
           from: 'jenkins@example.com',
           replyTo: 'jenkins@example.com',
           mimeType: 'text/html'
          )
      }
   echo 'Slack Notifications'
        slackSend (
            channel: '#jenkins', 
            color: COLOR_MAP[currentBuild.currentResult],
            message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} \n build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        )
        junit testResults: 'dastardly-report.xml', skipPublishingChecks: true, skipMarkingBuildUnstable: true
    }
  }
}
   
